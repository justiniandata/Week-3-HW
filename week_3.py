# -*- coding: utf-8 -*-
"""Week-3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hvQkZQeaHu0dXnNIwgsGPrNCdnHLDhII
"""



"""1.⁠ ⁠Filter the data to include only weekdays (Monday to Friday) and plot a line graph showing the pedestrian counts for each day of the week."""

# Convert 'Date' column to datetime format
df['Date'] = pd.to_datetime(df['Date'])

# Create a new column to represent the day of the week
df['Weekday'] = df['Date'].dt.weekday

# Filter the DataFrame to keep only weekdays (0-4)
weekday_data = df[df['Weekday'] < 5]

# Group by weekday and calculate the average pedestrian counts
average_counts = weekday_data.groupby('Weekday')['Pedestrians'].mean()

# Now let's plot these averages
plt.figure(figsize=(10, 6))
plt.plot(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'], average_counts, marker='o')
plt.title('Average Pedestrian Counts by Weekday')
plt.xlabel('Weekday')
plt.ylabel('Average Pedestrian Count')
plt.grid()
plt.show()

"""2. Track Pedestrian Counts on Brooklyn Bridge for 2019 and Analyze Weather Conditions:"""

# Filter data for the year 2019
df['Year'] = df['Date'].dt.year
data_2019 = df[df['Year'] == 2019]

# One-hot encode the 'Weather Summary' column
encoded_data = pd.get_dummies(data_2019, columns=['Weather Summary'])

# Calculate the correlation between pedestrian counts and weather conditions
correlation_matrix = encoded_data.corr()
weather_correlation = correlation_matrix['Pedestrians'].filter(like='Weather Summary')

# Plotting the correlation results
plt.figure(figsize=(12, 8))
plt.bar(weather_correlation.index, weather_correlation.values)
plt.title('Correlation Between Weather Conditions and Pedestrian Counts (2019)')
plt.xlabel('Weather Conditions')
plt.ylabel('Correlation with Pedestrian Counts')
plt.xticks(rotation=90)
plt.grid()
plt.show()

"""3. Implement Custom Function to Categorize Time of Day and Analyze Pedestrian Activity Patterns:

"""

# Function to categorize the time of day based on hour
def categorize_time_of_day(hour):
    if 5 <= hour < 12:
        return 'Morning'
    elif 12 <= hour < 17:
        return 'Afternoon'
    elif 17 <= hour < 21:
        return 'Evening'
    else:
        return 'Night'

# Extract hour from the time column
df['Hour'] = pd.to_datetime(df['Time']).dt.hour
df['Time of Day'] = df['Hour'].apply(categorize_time_of_day)

# Calculate average pedestrian counts by time of day
activity_by_time = df.groupby('Time of Day')['Pedestrians'].mean()

# Plotting pedestrian activity throughout the day
plt.figure(figsize=(10, 6))
activity_by_time = activity_by_time.reindex(['Morning', 'Afternoon', 'Evening', 'Night'])
plt.bar(activity_by_time.index, activity_by_time.values, color=['orange', 'blue', 'green', 'purple'])
plt.title('Average Pedestrian Activity by Time of Day')
plt.xlabel('Time of Day')
plt.ylabel('Average Pedestrian Count')
plt.grid()
plt.show()